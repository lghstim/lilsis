  <button id="zoom-in" class="zoom-button">+</button>
  <button id="zoom-out" class="zoom-button">&ndash;</button>

  <%= link_to(image_tag('lilsis-logo-trans-200.png', id: 'netmap-logo'), root_path) %>

  <div id="netmap-legend">
    <div id="netmap-legend-current">&ndash;&ndash;&ndash;&ndash; &nbsp; current</div>
    <div id="netmap-legend-past">&ndash; &ndash; &ndash; &nbsp; past</div>
  </div>
  <script>
  $(document).ready(function(){
    $('#zoom-in').on('click', function() { netmap.zoom_by(1.2); });
    $('#zoom-out').on('click', function() { netmap.zoom_by(0.83333333); });

    $("svg a").each(function(i, a) {
      a.setAttribute("target", "_blank");
    });
  });
  
  var exportMap = function(width, height, scale) {
    var doctype = '<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">';

    var zoom = document.getElementById('zoom');

    inlineImages(function() {
      var svg = document.getElementById('svg');
      var nm = document.getElementById('netmap');
      svg.setAttribute("height", Math.floor(nm.clientHeight));
      svg.setAttribute("width", Math.floor(nm.clientWidth));

      var clonedSVG = svg.cloneNode(true);

      if (height) {
        clonedSVG.setAttribute("height", height);
      }

      if (width) {
        clonedSVG.setAttribute("width", width);
      }
      
      clonedZoom = clonedSVG.querySelector("#zoom");
      clonedZoom.setAttribute('transform', 'translate(' + (0 + width/2) + ',' + (0 + height/2) + ') scale(' + (1 + scale) + ')');

      var style = document.createElement('style');
      
      style.textContent = "";
      
      for (var i = 0; i < document.styleSheets.length; i++) {
        str = document.styleSheets[i].href;
        if (str && str.indexOf("maps.css") != -1) {
          var rules = document.styleSheets[i].cssRules;
          for (var j=0; j<rules.length;j++){
            style.textContent += (rules[j].cssText + "\n");
          }
          break;
        }
      }
      
      clonedSVG.getElementsByTagName("defs")[0].appendChild(style);

      var svg_xml = (new XMLSerializer()).serializeToString(clonedSVG);
      var canvas = document.getElementById('canvas');

      svg_xml = unescape(encodeURIComponent(svg_xml));

      var img = document.getElementById('img');
      img.src = "";
      img.style.display = 'inline-block';
      img.height = (height || svg.clientHeight || svg.height.baseVal.value);
      img.width = (width || svg.clientWidth || svg.width.baseVal.value);

      img.onload = function(e) {
        canvas.height = img.height;
        canvas.width = img.width;
        canvas.style.display = 'inline-block';
        var ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

        var a = document.createElement("a");
        a.download = 'map.png';
        a.href = canvas.toDataURL('image/png');
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);

        //window.open(canvas.toDataURL(), '_blank');
        img.style.display = 'none';
        canvas.style.display = 'none';
        svg.setAttribute("height", "100%");
        svg.setAttribute("width", "100%");
      }

      img.src = "data:image/svg+xml;base64," + btoa(svg_xml);
    });
  }


  function inlineImages(callback) {
    if (window.navigator.userAgent.indexOf('Chrome') !== -1) {
      callback();
    } else {
      var images = document.querySelectorAll('svg image');
      var left = images.length;
      
      if (left == 0) {
        callback();
      }

      for (var j = 0; j < images.length; j++) {
        if (images[j].getAttribute('href').indexOf("data:") == 0) {
          left--;

          if (left ==0) {
            callback();
          } else {
            continue;
          }
        }

        (function(image) {
          var canvas = document.createElement('canvas');
          var ctx = canvas.getContext('2d');
          var img = new Image();
          img.crossOrigin = 'Anonymous';

          img.onload = function() {
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);
            image.setAttribute('href', canvas.toDataURL('image/png'));
            left--;
            if (left == 0) {
              callback();
            }
          }

          img.src = image.getAttribute('xlink:href') || image.getAttribute('href');
        }(images[j]));
      }
    }
  }

  </script>